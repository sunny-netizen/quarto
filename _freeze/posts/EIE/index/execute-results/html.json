{
  "hash": "6472d0e5ca2c2d8df35be52cbd12e398",
  "result": {
    "markdown": "---\ntitle: \"Transportation Emissions\"\nauthor: \"suncloud\"\ndate: \"2023-06\"\ncategories: [D3, HTML, CSS]\nimage: \"sankey.png\"\n---\n\nSankey Chart and Road Map for Santa Monica data.\n\n![](sankey.png)\n\nData Source: Google Environmental Insights Explorer.\n\n[Link to Project](https://sunny-netizen.github.io/GHG/) [Code](https://github.com/sunny-netizen/GHG)\n\n### Modes in Santa Monica Road Network\n\nImport Libraries\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport geopandas as gpd\nimport networkx as nx\nimport osmnx as ox\nimport matplotlib.pyplot as plt\nimport matplotlib.lines as mlines\n```\n:::\n\n\nDownload OpenStreetMap Data\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Define the place name or address\nplace = \"Santa Monica, California, USA\"\n\n# Retrieve the road network for the place\nG = ox.graph_from_place(place, network_type='all', buffer_dist=1000)\n\n# Retrieve the boundary polygon for the place\nboundary = ox.geocode_to_gdf(place)\n\n# Plot the road network within the boundary\nfig, ax = plt.subplots()\nox.plot_graph(G, bgcolor='w', edge_color='gray', node_size=0, ax=ax)\nboundary.plot(ax=ax, edgecolor='black', facecolor='none', linewidth=2)\nplt.show();\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=424 height=389}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\nAcquire data as GeoDataFrames\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Convert the NetworkX graph to GeoDataFrames\nnodes, edges = ox.graph_to_gdfs(G)\n\n# Look at the data columns\nedges.columns\n\n# Look at counts per edge type\nedge_types = edges['highway'].value_counts()\nedge_types\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nfootway                          10472\nservice                           9159\nresidential                       7450\ntertiary                          2536\nsecondary                         1346\nprimary                            993\ncycleway                           336\nunclassified                       232\n[steps, footway]                   148\npedestrian                          84\npath                                76\ntrunk                               50\nsteps                               42\nmotorway_link                       38\nsecondary_link                      31\n[residential, service]              27\n[residential, footway]              26\n[path, footway]                     16\nmotorway                            15\ntrunk_link                          13\n[footway, service]                  12\n[service, footway]                  12\ntertiary_link                       10\n[residential, path]                 10\n[unclassified, service]              8\nprimary_link                         6\n[footway, pedestrian]                6\n[steps, path]                        6\n[footway, cycleway]                  4\n[steps, residential, footway]        4\n[steps, pedestrian]                  4\n[service, cycleway]                  2\n[steps, residential]                 2\n[steps, footway, corridor]           2\n[residential, tertiary]              2\ntrack                                2\n[track, footway]                     2\n[steps, path, footway]               2\nName: highway, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Generalize highway types\n# https://wiki.openstreetmap.org/wiki/Tag:highway%3Dpedestrian\nedges['highway'] = edges['highway'].apply(lambda x: ', '.join(x) if isinstance(x, list) else x)\nedges['highway'] = edges['highway'].str.replace('footway|steps|pedestrian|corridor|track', 'path')\nedges['highway'] = edges['highway'].str.replace('roads_link|motorway_link|trunk_link|primary_link|secondary_link|motorway_junction', 'roads')\nedges['highway'] = edges['highway'].str.replace('motorway|trunk|primary|secondary|tertiary|unclassified|residential|service', 'roads')\nedges.loc[edges['highway'].str.contains('roads'), 'highway'] = 'roads'\nedges.loc[edges['highway'].str.contains('cycleway'), 'highway'] = 'cycleway'\nedges.loc[edges['highway'].str.contains('path'), 'highway'] = 'path'\nedge_types = edges['highway'].value_counts()\nedge_types\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/var/folders/13/hf_sfnls1lq6kn8vsc92q40h0000gn/T/ipykernel_8329/3233845876.py:4: FutureWarning:\n\nThe default value of regex will change from True to False in a future version.\n\n/var/folders/13/hf_sfnls1lq6kn8vsc92q40h0000gn/T/ipykernel_8329/3233845876.py:5: FutureWarning:\n\nThe default value of regex will change from True to False in a future version.\n\n/var/folders/13/hf_sfnls1lq6kn8vsc92q40h0000gn/T/ipykernel_8329/3233845876.py:6: FutureWarning:\n\nThe default value of regex will change from True to False in a future version.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nroads       21984\npath        10862\ncycleway      340\nName: highway, dtype: int64\n```\n:::\n:::\n\n\nColor-code roads by type\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n#https://stackoverflow.com/questions/63102436/coloring-edges-in-osmnx-graph-based-on-edge-attribute\n\n# get one color for each highway type in the graph\ncolor_list = ['#B0CFDE','green','red'] #\n#color_list = ox.plot.get_colors(n=len(edge_types), cmap='hsv', return_hex=True)\n#color_list = ['#00e600','#ffcc99','fuchsia']\n#color_list = ['#ccccff','green','magenta']\n#color_list = ['white','lime','magenta']\ncolor_mapper = pd.Series(color_list, index=edge_types.index).to_dict()\nedges['color'] = edges['highway'].map(color_mapper)\n\n```\n:::\n\n\nPlot details\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# check the bounds for xlim and ylim\nminx , miny , maxx , maxy = edges.total_bounds # = [-118.5250193,   33.9888725, -118.4328995,   34.0586015]\n\n# custom legend\nblack_line = mlines.Line2D([], [], color='black', label='City Boundary')\nblue_line = mlines.Line2D([], [], color='#B0CFDE', label='Road')\ngreen_line = mlines.Line2D([], [], color='green', label='Path')\nred_line = mlines.Line2D([], [], color='red', label='Cycleway')\n```\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfig, ax = plt.subplots(figsize=(10, 8))\nedges.plot(ax=ax, color = edges['color'], linewidth=0.5, zorder=1);\nboundary.plot(ax=ax, edgecolor='black', color='none', zorder=10);\nax.legend(handles=[black_line,blue_line,green_line,red_line], bbox_to_anchor=(1.2, 1.1)) #loc='lower left',\nax.set_ylim(miny, maxy)\nax.set_xlim(minx, maxx)\n#ax.set_xticklabels([])\n#ax.set_yticklabels([])\n#ax.spines['top'].set_visible(False)\n#ax.spines['right'].set_visible(False)\n#ax.spines['bottom'].set_visible(False)\n#ax.spines['left'].set_visible(False)\nax.axis('off')\nplt.show();\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-1.png){width=790 height=663}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}